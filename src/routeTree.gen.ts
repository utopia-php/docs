/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as DocsRouteImport } from './routes/_docs'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as SplatRouteImport } from './routes/$'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicBlogRouteImport } from './routes/_public/blog'
import { Route as ProtectedExampleProtectedRouteRouteImport } from './routes/_protected/example-protected-route'
import { Route as DocsExampleCompsRouteImport } from './routes/_docs/example-comps'
import { Route as DocsContributingRouteImport } from './routes/_docs/contributing'
import { Route as DocsComparisonRouteImport } from './routes/_docs/comparison'
import { Route as DocsChangelogRouteImport } from './routes/_docs/changelog'
import { Route as AuthSignUpRouteImport } from './routes/_auth/sign-up'
import { Route as AuthSignOutRouteImport } from './routes/_auth/sign-out'
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in'
import { Route as ApiHelloRouteImport } from './routes/_api/hello'
import { Route as PublicBlogSlugRouteImport } from './routes/_public/blog.$slug'
import { Route as DocsLibraryLibraryNameRouteImport } from './routes/_docs/library.$libraryName'
import { Route as DocsLibraryLibraryNameConceptConceptPathRouteImport } from './routes/_docs/library.$libraryName.concept.$conceptPath'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsRoute = DocsRouteImport.update({
  id: '/_docs',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const PublicBlogRoute = PublicBlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedExampleProtectedRouteRoute =
  ProtectedExampleProtectedRouteRouteImport.update({
    id: '/example-protected-route',
    path: '/example-protected-route',
    getParentRoute: () => ProtectedRoute,
  } as any)
const DocsExampleCompsRoute = DocsExampleCompsRouteImport.update({
  id: '/example-comps',
  path: '/example-comps',
  getParentRoute: () => DocsRoute,
} as any)
const DocsContributingRoute = DocsContributingRouteImport.update({
  id: '/contributing',
  path: '/contributing',
  getParentRoute: () => DocsRoute,
} as any)
const DocsComparisonRoute = DocsComparisonRouteImport.update({
  id: '/comparison',
  path: '/comparison',
  getParentRoute: () => DocsRoute,
} as any)
const DocsChangelogRoute = DocsChangelogRouteImport.update({
  id: '/changelog',
  path: '/changelog',
  getParentRoute: () => DocsRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSignOutRoute = AuthSignOutRouteImport.update({
  id: '/sign-out',
  path: '/sign-out',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)
const ApiHelloRoute = ApiHelloRouteImport.update({
  id: '/_api/hello',
  path: '/hello',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicBlogSlugRoute = PublicBlogSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => PublicBlogRoute,
} as any)
const DocsLibraryLibraryNameRoute = DocsLibraryLibraryNameRouteImport.update({
  id: '/library/$libraryName',
  path: '/library/$libraryName',
  getParentRoute: () => DocsRoute,
} as any)
const DocsLibraryLibraryNameConceptConceptPathRoute =
  DocsLibraryLibraryNameConceptConceptPathRouteImport.update({
    id: '/concept/$conceptPath',
    path: '/concept/$conceptPath',
    getParentRoute: () => DocsLibraryLibraryNameRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute
  '/hello': typeof ApiHelloRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-out': typeof AuthSignOutRoute
  '/sign-up': typeof AuthSignUpRoute
  '/changelog': typeof DocsChangelogRoute
  '/comparison': typeof DocsComparisonRoute
  '/contributing': typeof DocsContributingRoute
  '/example-comps': typeof DocsExampleCompsRoute
  '/example-protected-route': typeof ProtectedExampleProtectedRouteRoute
  '/blog': typeof PublicBlogRouteWithChildren
  '/': typeof PublicIndexRoute
  '/library/$libraryName': typeof DocsLibraryLibraryNameRouteWithChildren
  '/blog/$slug': typeof PublicBlogSlugRoute
  '/library/$libraryName/concept/$conceptPath': typeof DocsLibraryLibraryNameConceptConceptPathRoute
}
export interface FileRoutesByTo {
  '/$': typeof SplatRoute
  '/hello': typeof ApiHelloRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-out': typeof AuthSignOutRoute
  '/sign-up': typeof AuthSignUpRoute
  '/changelog': typeof DocsChangelogRoute
  '/comparison': typeof DocsComparisonRoute
  '/contributing': typeof DocsContributingRoute
  '/example-comps': typeof DocsExampleCompsRoute
  '/example-protected-route': typeof ProtectedExampleProtectedRouteRoute
  '/blog': typeof PublicBlogRouteWithChildren
  '/': typeof PublicIndexRoute
  '/library/$libraryName': typeof DocsLibraryLibraryNameRouteWithChildren
  '/blog/$slug': typeof PublicBlogSlugRoute
  '/library/$libraryName/concept/$conceptPath': typeof DocsLibraryLibraryNameConceptConceptPathRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/$': typeof SplatRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_docs': typeof DocsRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_api/hello': typeof ApiHelloRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-out': typeof AuthSignOutRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_docs/changelog': typeof DocsChangelogRoute
  '/_docs/comparison': typeof DocsComparisonRoute
  '/_docs/contributing': typeof DocsContributingRoute
  '/_docs/example-comps': typeof DocsExampleCompsRoute
  '/_protected/example-protected-route': typeof ProtectedExampleProtectedRouteRoute
  '/_public/blog': typeof PublicBlogRouteWithChildren
  '/_public/': typeof PublicIndexRoute
  '/_docs/library/$libraryName': typeof DocsLibraryLibraryNameRouteWithChildren
  '/_public/blog/$slug': typeof PublicBlogSlugRoute
  '/_docs/library/$libraryName/concept/$conceptPath': typeof DocsLibraryLibraryNameConceptConceptPathRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$'
    | '/hello'
    | '/sign-in'
    | '/sign-out'
    | '/sign-up'
    | '/changelog'
    | '/comparison'
    | '/contributing'
    | '/example-comps'
    | '/example-protected-route'
    | '/blog'
    | '/'
    | '/library/$libraryName'
    | '/blog/$slug'
    | '/library/$libraryName/concept/$conceptPath'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$'
    | '/hello'
    | '/sign-in'
    | '/sign-out'
    | '/sign-up'
    | '/changelog'
    | '/comparison'
    | '/contributing'
    | '/example-comps'
    | '/example-protected-route'
    | '/blog'
    | '/'
    | '/library/$libraryName'
    | '/blog/$slug'
    | '/library/$libraryName/concept/$conceptPath'
  id:
    | '__root__'
    | '/$'
    | '/_auth'
    | '/_docs'
    | '/_protected'
    | '/_public'
    | '/_api/hello'
    | '/_auth/sign-in'
    | '/_auth/sign-out'
    | '/_auth/sign-up'
    | '/_docs/changelog'
    | '/_docs/comparison'
    | '/_docs/contributing'
    | '/_docs/example-comps'
    | '/_protected/example-protected-route'
    | '/_public/blog'
    | '/_public/'
    | '/_docs/library/$libraryName'
    | '/_public/blog/$slug'
    | '/_docs/library/$libraryName/concept/$conceptPath'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute
  AuthRoute: typeof AuthRouteWithChildren
  DocsRoute: typeof DocsRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  ApiHelloRoute: typeof ApiHelloRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_docs': {
      id: '/_docs'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/blog': {
      id: '/_public/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof PublicBlogRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/example-protected-route': {
      id: '/_protected/example-protected-route'
      path: '/example-protected-route'
      fullPath: '/example-protected-route'
      preLoaderRoute: typeof ProtectedExampleProtectedRouteRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_docs/example-comps': {
      id: '/_docs/example-comps'
      path: '/example-comps'
      fullPath: '/example-comps'
      preLoaderRoute: typeof DocsExampleCompsRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/contributing': {
      id: '/_docs/contributing'
      path: '/contributing'
      fullPath: '/contributing'
      preLoaderRoute: typeof DocsContributingRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/comparison': {
      id: '/_docs/comparison'
      path: '/comparison'
      fullPath: '/comparison'
      preLoaderRoute: typeof DocsComparisonRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/changelog': {
      id: '/_docs/changelog'
      path: '/changelog'
      fullPath: '/changelog'
      preLoaderRoute: typeof DocsChangelogRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/sign-out': {
      id: '/_auth/sign-out'
      path: '/sign-out'
      fullPath: '/sign-out'
      preLoaderRoute: typeof AuthSignOutRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_api/hello': {
      id: '/_api/hello'
      path: '/hello'
      fullPath: '/hello'
      preLoaderRoute: typeof ApiHelloRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/blog/$slug': {
      id: '/_public/blog/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof PublicBlogSlugRouteImport
      parentRoute: typeof PublicBlogRoute
    }
    '/_docs/library/$libraryName': {
      id: '/_docs/library/$libraryName'
      path: '/library/$libraryName'
      fullPath: '/library/$libraryName'
      preLoaderRoute: typeof DocsLibraryLibraryNameRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/library/$libraryName/concept/$conceptPath': {
      id: '/_docs/library/$libraryName/concept/$conceptPath'
      path: '/concept/$conceptPath'
      fullPath: '/library/$libraryName/concept/$conceptPath'
      preLoaderRoute: typeof DocsLibraryLibraryNameConceptConceptPathRouteImport
      parentRoute: typeof DocsLibraryLibraryNameRoute
    }
  }
}

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignOutRoute: typeof AuthSignOutRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignOutRoute: AuthSignOutRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DocsLibraryLibraryNameRouteChildren {
  DocsLibraryLibraryNameConceptConceptPathRoute: typeof DocsLibraryLibraryNameConceptConceptPathRoute
}

const DocsLibraryLibraryNameRouteChildren: DocsLibraryLibraryNameRouteChildren =
  {
    DocsLibraryLibraryNameConceptConceptPathRoute:
      DocsLibraryLibraryNameConceptConceptPathRoute,
  }

const DocsLibraryLibraryNameRouteWithChildren =
  DocsLibraryLibraryNameRoute._addFileChildren(
    DocsLibraryLibraryNameRouteChildren,
  )

interface DocsRouteChildren {
  DocsChangelogRoute: typeof DocsChangelogRoute
  DocsComparisonRoute: typeof DocsComparisonRoute
  DocsContributingRoute: typeof DocsContributingRoute
  DocsExampleCompsRoute: typeof DocsExampleCompsRoute
  DocsLibraryLibraryNameRoute: typeof DocsLibraryLibraryNameRouteWithChildren
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsChangelogRoute: DocsChangelogRoute,
  DocsComparisonRoute: DocsComparisonRoute,
  DocsContributingRoute: DocsContributingRoute,
  DocsExampleCompsRoute: DocsExampleCompsRoute,
  DocsLibraryLibraryNameRoute: DocsLibraryLibraryNameRouteWithChildren,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

interface ProtectedRouteChildren {
  ProtectedExampleProtectedRouteRoute: typeof ProtectedExampleProtectedRouteRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedExampleProtectedRouteRoute: ProtectedExampleProtectedRouteRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicBlogRouteChildren {
  PublicBlogSlugRoute: typeof PublicBlogSlugRoute
}

const PublicBlogRouteChildren: PublicBlogRouteChildren = {
  PublicBlogSlugRoute: PublicBlogSlugRoute,
}

const PublicBlogRouteWithChildren = PublicBlogRoute._addFileChildren(
  PublicBlogRouteChildren,
)

interface PublicRouteChildren {
  PublicBlogRoute: typeof PublicBlogRouteWithChildren
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicBlogRoute: PublicBlogRouteWithChildren,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  AuthRoute: AuthRouteWithChildren,
  DocsRoute: DocsRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  ApiHelloRoute: ApiHelloRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
