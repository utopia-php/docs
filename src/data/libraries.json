{
  "network": [
    {
      "name": "DNS",
      "stars": 0,
      "description": "Lite & fast micro PHP DNS server abstraction that is easy to use.",
      "longDescription": "Utopia DNS is a simple and lite abstraction layer for quickly setting up a DNS server. This library is aiming to be as simple and easy to learn and use. The library provides both DNS server and client functionality, supporting multiple adapters including Native PHP Socket and Swoole UDP Server. It includes comprehensive DNS record support (A, NS, CNAME, SOA, MX, TXT, AAAA, SRV, etc.) and features a built-in benchmarking tool for performance testing. The library is dependency-free and can be used standalone with any PHP project or framework.",
      "githubUrl": "https://github.com/utopia-php/dns",
      "version": "1.0.0",
      "lastUpdated": "2025-01-27",
      "documentation": "https://docs.utopia-php.com/dns",
      "installation": "composer require utopia-php/dns",
      "features": ["DNS Server", "DNS Client", "Multiple Adapters", "Record Types", "Benchmarking", "Mock Resolver", "Custom Resolvers"],
      "dependencies": ["PHP 8.0+", "ext-sockets"],
      "category": "network",
      "license": "MIT",
      "concepts": [
        {
          "title": "DNS Server",
          "path": "dns-server",
          "description": "Learn how to set up and configure a DNS server",
          "content": "<p>The DNS server handles incoming DNS queries and responds with appropriate DNS records. It uses adapters for network communication and resolvers for query processing.</p><p>The server supports multiple adapters including Native PHP Socket and Swoole UDP Server for high-performance DNS resolution.</p>",
          "codeExample": {
            "language": "php",
            "title": "dns-server.php",
            "code": "<?php\n\nuse Appwrite\\DNS\\Server;\nuse Appwrite\\DNS\\Adapter\\Swoole;\nuse Appwrite\\DNS\\Resolver\\Mock;\n\n// Create a DNS server with Swoole adapter\n$server = new Swoole('0.0.0.0', 8000);\n$resolver = new Mock(); // Custom resolver\n$dns = new Server($server, $resolver);\n\n// Start listening for DNS queries\n$dns->start();",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>The server supports multiple adapters including Native PHP Socket and Swoole UDP Server for high-performance DNS resolution.</p>"
        },
        {
          "title": "DNS Client",
          "path": "dns-client",
          "description": "Query DNS records from any DNS server",
          "content": "<p>The DNS client allows you to query DNS records from any DNS server. It supports all standard DNS record types and provides a simple API for lookups.</p><p>The client supports all standard DNS record types including A, NS, CNAME, SOA, MX, TXT, AAAA, SRV, and more.</p>",
          "codeExample": {
            "language": "php",
            "title": "dns-client.php",
            "code": "<?php\n\nuse Appwrite\\DNS\\Client;\n\n// Query different record types\n$client = new Client('8.8.8.8');\n\n$aRecords = $client->query('example.com', 'A');      // IPv4 addresses\n$mxRecords = $client->query('example.com', 'MX');    // Mail servers\n$txtRecords = $client->query('example.com', 'TXT');  // Text records\n$aaaaRecords = $client->query('example.com', 'AAAA'); // IPv6 addresses",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>The client supports all standard DNS record types including A, NS, CNAME, SOA, MX, TXT, AAAA, SRV, and more.</p>"
        },
        {
          "title": "Server Adapters",
          "path": "adapters",
          "description": "Choose the right adapter for your deployment",
          "content": "<p>Adapters handle the low-level network communication for the DNS server. Choose the adapter that best fits your deployment environment.</p><p>Swoole provides the best performance for production environments, while Native PHP Socket is perfect for development and simple deployments.</p>",
          "codeExample": {
            "language": "php",
            "title": "adapters.php",
            "code": "<?php\n\nuse Appwrite\\DNS\\Adapter\\Native;\nuse Appwrite\\DNS\\Adapter\\Swoole;\n\n// Native PHP Socket (PHP 8.0+)\n$server = new Native('0.0.0.0', 8000);\n\n// Swoole UDP Server (High Performance)\n$server = new Swoole('0.0.0.0', 8000);\n\n// Workerman (Coming Soon)\n// ReactPHP (Coming Soon)",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Swoole provides the best performance for production environments, while Native PHP Socket is perfect for development and simple deployments.</p>"
        },
        {
          "title": "Custom Resolvers",
          "path": "resolvers",
          "description": "Create custom DNS resolution logic",
          "content": "<p>Resolvers process DNS queries and return appropriate responses. You can create custom resolvers by extending the base Resolver class.</p><p>Custom resolvers allow you to implement custom DNS logic, caching, load balancing, or integration with external systems.</p>",
          "codeExample": {
            "language": "php",
            "title": "CustomResolver.php",
            "code": "<?php\n\nuse Appwrite\\DNS\\Resolver;\nuse Appwrite\\DNS\\Query;\nuse Appwrite\\DNS\\Response;\n\n// Custom resolver example\nclass CustomResolver extends Resolver\n{\n    public function resolve(Query $query): ?Response\n    {\n        // Custom DNS resolution logic\n        if ($query->getName() === 'example.com') {\n            return new Response([\n                'name' => 'example.com',\n                'type' => 'A',\n                'ttl' => 300,\n                'data' => '192.168.1.1'\n            ]);\n        }\n        \n        return null; // Delegate to parent or other resolver\n    }\n}",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Custom resolvers allow you to implement custom DNS logic, caching, load balancing, or integration with external systems.</p>"
        },
        {
          "title": "Performance Benchmarking",
          "path": "benchmarking",
          "description": "Measure DNS server performance under load",
          "content": "<p>The library includes a built-in benchmarking tool to measure DNS server performance under load with detailed metrics and analysis.</p><p>Benchmarking helps you understand the performance characteristics of your DNS server and identify bottlenecks.</p>",
          "codeExample": {
            "language": "bash",
            "title": "Terminal",
            "code": "# Run benchmark with default settings\nphp tests/benchmark.php\n\n# Custom benchmark configuration\nphp tests/benchmark.php --server=127.0.0.1 --port=5300 --iterations=1000 --concurrency=20",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Benchmarking helps you understand the performance characteristics of your DNS server and identify bottlenecks.</p>"
        }
      ]
    },
    {
      "name": "Domains",
      "stars": 21,
      "description": "Domain parsing and validation with TLD extraction and subdomain handling.",
      "githubUrl": "https://github.com/utopia-php/domains",
      "version": "2.1.0",
      "lastUpdated": "2024-01-08",
      "documentation": "https://docs.utopia-php.com/domains",
      "installation": "composer require utopia/domains",
      "features": ["Domain Parsing", "TLD Extraction", "Subdomain Handling", "Validation", "IDN Support"],
      "dependencies": ["PHP 8.1+", "ext-intl"],
      "category": "network"
    },
    {
      "name": "Fetch",
      "stars": 3,
      "description": "HTTP client library with async requests, response handling, and error management.",
      "githubUrl": "https://github.com/utopia-php/fetch",
      "version": "1.1.0",
      "lastUpdated": "2024-01-12",
      "documentation": "https://docs.utopia-php.com/fetch",
      "installation": "composer require utopia/fetch",
      "features": ["Async Requests", "Response Handling", "Error Management", "Headers", "Cookies"],
      "dependencies": ["PHP 8.1+", "ext-curl"],
      "category": "network"
    },
    {
      "name": "HTTP",
      "stars": 291,
      "description": "Micro PHP HTTP framework with routing and middleware.",
      "longDescription": "Utopia HTTP is a lightweight, high-performance PHP framework designed for building modern web applications and APIs. Built with simplicity and speed in mind, it provides essential HTTP functionality without the bloat of larger frameworks. The framework features an intuitive routing system that supports RESTful patterns, dynamic parameters, and route groups. Its middleware architecture allows for clean separation of concerns, enabling you to add authentication, logging, CORS handling, and rate limiting with ease. The request/response system is built on PSR-7 standards, ensuring compatibility with the broader PHP ecosystem while providing a clean, object-oriented API for handling HTTP data. Perfect for microservices, APIs, and applications that need fast, reliable HTTP handling without unnecessary complexity.",
      "githubUrl": "https://github.com/utopia-php/http",
      "version": "2.0.0",
      "lastUpdated": "2024-01-15",
      "documentation": "https://docs.utopia-php.com/http",
      "installation": "composer require utopia/http",
      "features": ["Routing", "Middleware", "Request/Response", "CORS", "Rate Limiting"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "network",
      "license": "MIT",
      "concepts": [
        {
          "title": "Routes",
          "path": "routes",
          "description": "Learn how to define routes and actions in Utopia HTTP",
          "content": "<p>Routes in Utopia HTTP are defined using a fluent API that makes it easy to create RESTful endpoints. Each route can have multiple HTTP methods and can be grouped for better organization.</p><p>The action function receives the request and response objects, allowing you to handle the business logic for each endpoint.</p>",
          "codeExample": {
            "language": "php",
            "title": "routes.php",
            "code": "<?php\n\nuse Utopia\\Http\\Http;\nuse Utopia\\Http\\Request;\nuse Utopia\\Http\\Response;\n\n// Define a simple GET route\nHttp::get('/users')\n    ->inject('request')\n    ->inject('response')\n    ->action(\n        function(Request $request, Response $response) {\n            $response->json(['users' => []]);\n        }\n    );\n\n// Define a POST route with parameters\nHttp::post('/users/{userId}')\n    ->param('userId', '', new Text(36), 'User ID')\n    ->inject('request')\n    ->inject('response')\n    ->action(\n        function(string $userId, Request $request, Response $response) {\n            // Handle user creation\n            $response->json(['id' => $userId]);\n        }\n    );",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Routes support all standard HTTP methods: GET, POST, PUT, PATCH, DELETE, OPTIONS, and HEAD. You can also use route groups to organize related routes and apply middleware to multiple routes at once.</p>"
        },
        {
          "title": "Dependency Injection",
          "path": "dependency-injection",
          "description": "Understand how dependency injection works in Utopia HTTP",
          "content": "<p>Utopia HTTP uses a powerful dependency injection system that automatically resolves and injects dependencies into your route actions. This makes your code more testable and maintainable.</p><p>Dependencies are registered in the container and can be injected using the <code>inject()</code> method on routes.</p>",
          "codeExample": {
            "language": "php",
            "title": "dependency-injection.php",
            "code": "<?php\n\nuse Utopia\\Http\\Http;\nuse Utopia\\Http\\Container;\nuse Utopia\\Http\\Request;\nuse Utopia\\Http\\Response;\n\n// Register dependencies\n$container = new Container();\n$container->set('database', new Database());\n$container->set('logger', new Logger());\n\n// Inject dependencies into routes\nHttp::get('/users')\n    ->inject('database')\n    ->inject('logger')\n    ->action(\n        function(Database $db, Logger $logger) {\n            $logger->info('Fetching users');\n            $users = $db->query('SELECT * FROM users');\n            return $users;\n        }\n    );",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>The container supports both singleton and transient dependencies. You can also inject the request and response objects, which are automatically available in all routes.</p>"
        },
        {
          "title": "Validation",
          "path": "validation",
          "description": "Learn how to validate and handle route parameters",
          "content": "<p>Utopia HTTP provides a comprehensive validation system for route parameters. You can define parameters with types, validation rules, and descriptions that are automatically documented.</p><p>Parameters are validated before the action is executed, ensuring type safety and data integrity.</p>",
          "codeExample": {
            "language": "php",
            "title": "validation.php",
            "code": "<?php\n\nuse Utopia\\Http\\Http;\nuse Utopia\\Validator\\Text;\nuse Utopia\\Validator\\Integer;\nuse Utopia\\Validator\\Email;\n\n// Define route with validated parameters\nHttp::post('/users')\n    ->param('name', '', new Text(100), 'User name')\n    ->param('email', '', new Email(), 'User email')\n    ->param('age', 0, new Integer(18, 120), 'User age')\n    ->inject('request')\n    ->inject('response')\n    ->action(\n        function(string $name, string $email, int $age, Request $request, Response $response) {\n            // Parameters are already validated and typed\n            $user = createUser($name, $email, $age);\n            $response->json($user);\n        }\n    );",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Utopia HTTP includes many built-in validators for common data types like text, numbers, emails, URLs, and more. You can also create custom validators for specific business logic.</p>"
        },
        {
          "title": "Hooks",
          "path": "hooks",
          "description": "Implement middleware and hooks for cross-cutting concerns",
          "content": "<p>Hooks and middleware allow you to implement cross-cutting concerns like authentication, logging, CORS, and rate limiting. They can be applied globally or to specific routes.</p><p>Hooks run before and after route execution, while middleware can modify the request/response pipeline.</p>",
          "codeExample": {
            "language": "php",
            "title": "middleware.php",
            "code": "<?php\n\nuse Utopia\\Http\\Http;\nuse Utopia\\Http\\Request;\nuse Utopia\\Http\\Response;\n\n// Global hook for logging\nHttp::hook('before', function(Request $request, Response $response) {\n    error_log('Request: ' . $request->getMethod() . ' ' . $request->getURI());\n});\n\n// CORS middleware\nHttp::middleware(function(Request $request, Response $response, callable $next) {\n    $response->addHeader('Access-Control-Allow-Origin', '*');\n    $response->addHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n    $response->addHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    \n    return $next($request, $response);\n});\n\n// Authentication middleware for protected routes\nHttp::middleware(function(Request $request, Response $response, callable $next) {\n    $token = $request->getHeader('Authorization');\n    if (!$token || !validateToken($token)) {\n        $response->setStatusCode(401);\n        $response->json(['error' => 'Unauthorized']);\n        return $response;\n    }\n    \n    return $next($request, $response);\n});",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Middleware is executed in the order it's registered. You can also create route-specific middleware by applying it to individual routes or route groups.</p>"
        },
        {
          "title": "Adapters",
          "path": "adapters",
          "description": "Choose the right server adapter for your deployment",
          "content": "<p>Utopia HTTP supports multiple server adapters, each optimized for different deployment scenarios. Choose the adapter that best fits your performance and compatibility requirements.</p><p>All adapters provide the same API, so you can switch between them without changing your application code.</p>",
          "codeExample": {
            "language": "php",
            "title": "server-adapters.php",
            "code": "<?php\n\nuse Utopia\\Http\\Http;\nuse Utopia\\Http\\Adapter\\Swoole;\nuse Utopia\\Http\\Adapter\\FPM;\nuse Utopia\\Http\\Adapter\\ReactPHP;\n\n// Swoole adapter (High Performance)\n$server = new Swoole('0.0.0.0', 8000);\n$http = new Http($server, new Container(), 'America/New_York');\n$http->start();\n\n// FPM adapter (Traditional PHP)\n$server = new FPM();\n$http = new Http($server, new Container(), 'America/New_York');\n$http->start();\n\n// ReactPHP adapter (Event-driven)\n$server = new ReactPHP('0.0.0.0', 8000);\n$http = new Http($server, new Container(), 'America/New_York');\n$http->start();",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Swoole provides the best performance for production environments, while FPM is perfect for traditional shared hosting. ReactPHP offers event-driven architecture for high-concurrency applications.</p>"
        },
        {
          "title": "Labels",
          "path": "labels",
          "description": "Organize and categorize your routes with labels",
          "content": "<p>Labels allow you to organize and categorize your routes for better documentation and API management. They're particularly useful for grouping related endpoints and generating API documentation.</p><p>Labels can be used to filter routes, generate documentation, and implement route-specific features.</p>",
          "codeExample": {
            "language": "php",
            "title": "labels.php",
            "code": "<?php\n\nuse Utopia\\Http\\Http;\n\n// Label routes for API versioning\nHttp::get('/v1/users')\n    ->label('version', 'v1')\n    ->label('group', 'users')\n    ->action(function() {\n        // v1 user logic\n    });\n\nHttp::get('/v2/users')\n    ->label('version', 'v2')\n    ->label('group', 'users')\n    ->action(function() {\n        // v2 user logic\n    });\n\n// Label routes for authentication\nHttp::post('/auth/login')\n    ->label('auth', 'public')\n    ->action(function() {\n        // public login endpoint\n    });\n\nHttp::get('/users/profile')\n    ->label('auth', 'protected')\n    ->action(function() {\n        // protected user endpoint\n    });",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>Labels are metadata that don't affect route execution but can be used by middleware, documentation generators, and other tools to understand and categorize your API structure.</p>"
        },
        {
          "title": "Lifecycle",
          "path": "lifecycle",
          "description": "Understand the request lifecycle in Utopia HTTP",
          "content": "<p>The Utopia HTTP request lifecycle consists of several phases: middleware execution, parameter validation, route matching, action execution, and response handling.</p><p>Understanding the lifecycle helps you implement features like logging, error handling, and performance monitoring effectively.</p>",
          "codeExample": {
            "language": "php",
            "title": "lifecycle.php",
            "code": "<?php\n\nuse Utopia\\Http\\Http;\nuse Utopia\\Http\\Request;\nuse Utopia\\Http\\Response;\n\n// Lifecycle hooks\nHttp::hook('before', function(Request $request, Response $response) {\n    // 1. Before middleware execution\n    $startTime = microtime(true);\n    $request->setAttribute('startTime', $startTime);\n});\n\nHttp::hook('after', function(Request $request, Response $response) {\n    // 2. After action execution\n    $startTime = $request->getAttribute('startTime');\n    $duration = microtime(true) - $startTime;\n    error_log('Request completed in ' . $duration . ' seconds');\n});\n\nHttp::hook('error', function(\\Throwable $error, Request $request, Response $response) {\n    // 3. Error handling\n    error_log('Request error: ' . $error->getMessage());\n    $response->setStatusCode(500);\n    $response->json(['error' => 'Internal Server Error']);\n});\n\n// Route execution\nHttp::get('/users')\n    ->action(function(Request $request, Response $response) {\n        // 4. Action execution\n        return ['users' => []];\n    });",
            "showLineNumbers": true
          },
          "additionalInfo": "<p>The lifecycle provides multiple hooks for different phases, allowing you to implement cross-cutting concerns like logging, monitoring, and error handling at the appropriate stage of request processing.</p>"
        }
      ]
    },
    {
      "name": "WebSocket",
      "stars": 12,
      "description": "Real-time communication server with WebSocket support.",
      "longDescription": "Utopia WebSocket provides a robust foundation for building real-time applications in PHP. Whether you're creating chat applications, live notifications, collaborative tools, or gaming platforms, this library handles the complex WebSocket protocol implementation so you can focus on your application logic. The library manages WebSocket connections efficiently, supporting both text and binary message formats. It includes comprehensive event handling for connection lifecycle events, message routing, and error management. Built-in connection pooling and message broadcasting capabilities make it easy to scale your real-time features. The library also provides utilities for handling WebSocket handshakes, frame parsing, and connection state management, making it perfect for both simple real-time features and complex multi-user applications that require persistent connections.",
      "githubUrl": "https://github.com/utopia-php/websocket",
      "version": "1.2.0",
      "lastUpdated": "2024-01-10",
      "documentation": "https://docs.utopia-php.com/websocket",
      "installation": "composer require utopia/websocket",
      "features": ["Real-time Communication", "Event Handling", "Connection Management", "Message Broadcasting"],
      "dependencies": ["PHP 8.1+", "ext-sockets"],
      "category": "network",
      "license": "MIT"
    }
  ],
  "data": [
    {
      "name": "AB",
      "stars": 6,
      "description": "A/B testing framework with experiment management and statistical analysis.",
      "githubUrl": "https://github.com/utopia-php/ab",
      "version": "1.0.0",
      "lastUpdated": "2024-01-14",
      "documentation": "https://docs.utopia-php.com/ab",
      "installation": "composer require utopia/ab",
      "features": ["Experiment Management", "Statistical Analysis", "Traffic Splitting", "Conversion Tracking"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "data"
    },
    {
      "name": "Abuse",
      "stars": 22,
      "description": "Abuse detection and prevention with rate limiting and IP blocking features.",
      "githubUrl": "https://github.com/utopia-php/abuse",
      "version": "1.2.0",
      "lastUpdated": "2024-01-06",
      "documentation": "https://docs.utopia-php.com/abuse",
      "installation": "composer require utopia/abuse",
      "features": ["Rate Limiting", "IP Blocking", "Pattern Detection", "Whitelist Management"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "data"
    },
    {
      "name": "Cache",
      "stars": 22,
      "description": "Caching system with Redis, Memcached, and file-based storage backends.",
      "githubUrl": "https://github.com/utopia-php/cache",
      "version": "2.1.0",
      "lastUpdated": "2024-01-13",
      "documentation": "https://docs.utopia-php.com/cache",
      "installation": "composer require utopia/cache",
      "features": ["Multiple Backends", "TTL Support", "Tag-based Invalidation", "Serialization"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "data"
    },
    {
      "name": "Config",
      "stars": 9,
      "description": "Configuration management with environment variables and file-based settings.",
      "githubUrl": "https://github.com/utopia-php/config",
      "version": "1.1.0",
      "lastUpdated": "2024-01-03",
      "documentation": "https://docs.utopia-php.com/config",
      "installation": "composer require utopia/config",
      "features": ["Environment Variables", "File-based Config", "Validation", "Type Casting"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "data"
    },
    {
      "name": "Database",
      "stars": 52,
      "description": "Database abstraction layer supporting MySQL, PostgreSQL, and SQLite with query builder.",
      "longDescription": "Utopia Database is a comprehensive database abstraction layer that simplifies database operations across multiple database engines. Whether you're working with MySQL, PostgreSQL, SQLite, or other PDO-compatible databases, this library provides a unified interface that eliminates vendor-specific code. The query builder offers a fluent, intuitive API for constructing complex SQL queries without writing raw SQL, making your code more readable and maintainable. Built-in migration support helps you version your database schema changes, while connection pooling optimizes performance for high-traffic applications. The library handles transactions gracefully, ensuring data integrity even in complex multi-step operations. With comprehensive error handling and logging, it's perfect for both small projects and enterprise applications that need reliable, scalable database access.",
      "githubUrl": "https://github.com/utopia-php/database",
      "version": "3.2.0",
      "lastUpdated": "2024-01-16",
      "documentation": "https://docs.utopia-php.com/database",
      "installation": "composer require utopia/database",
      "features": ["Multi-Database Support", "Query Builder", "Migrations", "Connection Pooling", "Transactions"],
      "dependencies": ["PHP 8.1+", "ext-pdo"],
      "category": "data",
      "license": "MIT"
    },
    {
      "name": "Image",
      "stars": 11,
      "description": "Image processing library with resize, crop, filter, and format conversion capabilities.",
      "githubUrl": "https://github.com/utopia-php/image",
      "version": "1.3.0",
      "lastUpdated": "2024-01-11",
      "documentation": "https://docs.utopia-php.com/image",
      "installation": "composer require utopia/image",
      "features": ["Resize & Crop", "Format Conversion", "Filters", "Watermarking", "Optimization"],
      "dependencies": ["PHP 8.1+", "ext-gd"],
      "category": "data"
    },
    {
      "name": "Locale",
      "stars": 7,
      "description": "Internationalization support with language detection and translation management.",
      "githubUrl": "https://github.com/utopia-php/locale",
      "version": "2.0.0",
      "lastUpdated": "2024-01-04",
      "documentation": "https://docs.utopia-php.com/locale",
      "installation": "composer require utopia/locale",
      "features": ["Language Detection", "Translation Management", "RTL Support", "Pluralization"],
      "dependencies": ["PHP 8.1+", "ext-intl"],
      "category": "data"
    },
    {
      "name": "Queue",
      "stars": 3,
      "description": "Job queue system with Redis backend and worker process management.",
      "githubUrl": "https://github.com/utopia-php/queue",
      "version": "1.1.0",
      "lastUpdated": "2024-01-07",
      "documentation": "https://docs.utopia-php.com/queue",
      "installation": "composer require utopia/queue",
      "features": ["Job Queuing", "Worker Management", "Retry Logic", "Priority Queues"],
      "dependencies": ["PHP 8.1+", "ext-redis"],
      "category": "data"
    },
    {
      "name": "Storage",
      "stars": 61,
      "description": "File storage abstraction with local, S3, and cloud storage provider support.",
      "githubUrl": "https://github.com/utopia-php/storage",
      "version": "2.0.0",
      "lastUpdated": "2024-01-09",
      "documentation": "https://docs.utopia-php.com/storage",
      "installation": "composer require utopia/storage",
      "features": ["Multi-Provider Support", "File Upload", "CDN Integration", "Metadata Management"],
      "dependencies": ["PHP 8.1+", "ext-curl"],
      "category": "data"
    }
  ],
  "logs": [
    {
      "name": "Audit",
      "stars": 9,
      "description": "Audit trail system for tracking user actions and system events.",
      "githubUrl": "https://github.com/utopia-php/audit",
      "version": "1.1.0",
      "lastUpdated": "2024-01-01",
      "documentation": "https://docs.utopia-php.com/audit",
      "installation": "composer require utopia/audit",
      "features": ["Audit Trail", "User Action Tracking", "System Events", "Compliance"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "logs"
    },
    {
      "name": "Logger",
      "stars": 18,
      "description": "Structured logging with multiple output formats and log level filtering.",
      "githubUrl": "https://github.com/utopia-php/logger",
      "version": "1.0.0",
      "lastUpdated": "2024-01-02",
      "documentation": "https://docs.utopia-php.com/logger",
      "installation": "composer require utopia/logger",
      "features": ["Structured Logging", "Multiple Formats", "Log Level Filtering", "Context Support"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "logs"
    }
  ],
  "services": [
    {
      "name": "Agents",
      "stars": 0,
      "description": "Lite & fast micro PHP AI agents library that is easy to use.",
      "longDescription": "Utopia Agents is a simple and lite library for building and managing AI agents in PHP applications. This library provides a collection of tools and utilities for creating, managing, and orchestrating AI agents with support for multiple AI providers including OpenAI, Anthropic, Deepseek, Perplexity, and XAI APIs. The library features flexible message types supporting both text and structured content, easy-to-use conversation management between agents and users, and comprehensive model selection from various AI providers. With fine-tuneable model behavior through temperature and token controls, it's perfect for building intelligent applications that need to interact with multiple AI services seamlessly.",
      "githubUrl": "https://github.com/utopia-php/agents",
      "version": "1.0.0",
      "lastUpdated": "2025-01-27",
      "documentation": "https://docs.utopia-php.com/agents",
      "installation": "composer require utopia-php/agents",
      "features": ["Multiple AI Providers", "Flexible Message Types", "Conversation Management", "Model Selection", "Parameter Control"],
      "dependencies": ["PHP 8.0+", "ext-json", "ext-curl"],
      "category": "services",
      "license": "MIT"
    },
    {
      "name": "Analytics",
      "stars": 20,
      "description": "Analytics tracking with event collection and data aggregation features.",
      "githubUrl": "https://github.com/utopia-php/analytics",
      "version": "1.2.0",
      "lastUpdated": "2023-12-25",
      "documentation": "https://docs.utopia-php.com/analytics",
      "installation": "composer require utopia/analytics",
      "features": ["Event Collection", "Data Aggregation", "Real-time Analytics", "Custom Metrics"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "services"
    },
    {
      "name": "Messaging",
      "stars": 66,
      "description": "Message queue and pub/sub system with Redis and RabbitMQ support.",
      "githubUrl": "https://github.com/utopia-php/messaging",
      "version": "2.0.0",
      "lastUpdated": "2023-12-28",
      "documentation": "https://docs.utopia-php.com/messaging",
      "installation": "composer require utopia/messaging",
      "features": ["Message Queues", "Pub/Sub", "Redis Support", "RabbitMQ Support"],
      "dependencies": ["PHP 8.1+", "ext-redis"],
      "category": "services"
    },
    {
      "name": "Orchestrations",
      "stars": 8,
      "description": "Service orchestration with workflow management and task coordination.",
      "githubUrl": "https://github.com/utopia-php/orchestrations",
      "version": "1.0.0",
      "lastUpdated": "2023-12-30",
      "documentation": "https://docs.utopia-php.com/orchestrations",
      "installation": "composer require utopia/orchestrations",
      "features": ["Workflow Management", "Task Coordination", "Service Discovery", "Health Checks"],
      "dependencies": ["PHP 8.1+", "ext-json"],
      "category": "services"
    },
    {
      "name": "Pay",
      "stars": 6,
      "description": "Payment processing integration with Stripe, PayPal, and other providers.",
      "githubUrl": "https://github.com/utopia-php/pay",
      "version": "1.0.0",
      "lastUpdated": "2023-12-20",
      "documentation": "https://docs.utopia-php.com/pay",
      "installation": "composer require utopia/pay",
      "features": ["Stripe Integration", "PayPal Support", "Multiple Providers", "Webhook Handling"],
      "dependencies": ["PHP 8.1+", "ext-curl"],
      "category": "services"
    }
  ],
  "other": [
    {
      "name": "CLI",
      "stars": 16,
      "description": "Command-line interface framework with argument parsing and command routing.",
      "githubUrl": "https://github.com/utopia-php/cli",
      "version": "3.0.0",
      "lastUpdated": "2023-12-15",
      "documentation": "https://docs.utopia-php.com/cli",
      "installation": "composer require utopia/cli",
      "features": ["Argument Parsing", "Command Routing", "Help Generation", "Interactive Mode"],
      "dependencies": ["PHP 8.1+", "ext-readline"],
      "category": "other"
    },
    {
      "name": "Platform",
      "stars": 5,
      "description": "Platform abstraction layer for cross-platform compatibility and detection.",
      "githubUrl": "https://github.com/utopia-php/platform",
      "version": "1.0.0",
      "lastUpdated": "2023-12-10",
      "documentation": "https://docs.utopia-php.com/platform",
      "installation": "composer require utopia/platform",
      "features": ["Cross-platform Support", "Platform Detection", "OS Abstraction", "Architecture Detection"],
      "dependencies": ["PHP 8.1+", "ext-posix"],
      "category": "other"
    },
    {
      "name": "Registry",
      "stars": 6,
      "description": "Dependency injection container with service registration and auto-wiring.",
      "githubUrl": "https://github.com/utopia-php/registry",
      "version": "2.1.0",
      "lastUpdated": "2023-12-18",
      "documentation": "https://docs.utopia-php.com/registry",
      "installation": "composer require utopia/registry",
      "features": ["Dependency Injection", "Service Registration", "Auto-wiring", "Singleton Support"],
      "dependencies": ["PHP 8.1+", "ext-reflection"],
      "category": "other"
    },
    {
      "name": "System",
      "stars": 14,
      "description": "System utilities for process management and environment detection.",
      "githubUrl": "https://github.com/utopia-php/system",
      "version": "1.3.0",
      "lastUpdated": "2023-12-12",
      "documentation": "https://docs.utopia-php.com/system",
      "installation": "composer require utopia/system",
      "features": ["Process Management", "Environment Detection", "System Info", "Resource Monitoring"],
      "dependencies": ["PHP 8.1+", "ext-posix"],
      "category": "other"
    }
  ]
}
