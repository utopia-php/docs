---
import Header from '@components/Header.svelte';
import Sidebar from '@components/Sidebar.svelte';
import TableOfContents from '@components/TableOfContents.svelte';
import SidebarOverlay from '@components/SidebarOverlay.svelte';
import Footer from '@components/Footer.svelte';
import { getCollection, type CollectionEntry } from 'astro:content';
import { groups } from '../content/config';
import '../styles/custom.css';

interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;

const openGraphImage = '/og-image.png';

// Fetch all documentation pages from the content collection
const docs = await getCollection('docs');

// Sort all documentation pages
const sortedDocs = docs.sort((a, b) => {
	// Sort by priority if defined (lower number comes first)
	if (a.data.priority !== undefined && b.data.priority !== undefined) {
		return a.data.priority - b.data.priority;
	}
	// Pages with priority come before pages without priority
	if (a.data.priority !== undefined) return -1;
	if (b.data.priority !== undefined) return 1;

	// Fall back to alphabetical sorting by title
	return a.data.title.localeCompare(b.data.title);
});

// Group pages by their defined group (Overview, Foundations, Components, etc.)
const docGroups = sortedDocs.reduce(
	(acc, doc) => {
		const group = doc.data.group || 'Ungrouped';
		if (!acc[group]) acc[group] = [];
		acc[group].push(doc);
		return acc;
	},
	{} as Record<string, CollectionEntry<'docs'>[]>
);

// Get all groups except Overview, maintaining the order defined in config.ts
const orderedGroups = Array.from(groups).filter((group) => group !== 'Overview');

// Create the final navigation structure
const navigation = [
	// Overview section: Home (index) and other overview pages
	...(docGroups['Overview'] || [])
		.sort((a, b) => {
			// Always put the index page (Home) first
			if (a.slug === 'index') return -1;
			if (b.slug === 'index') return 1;

			// Then sort remaining pages by priority
			if (a.data.priority !== undefined && b.data.priority !== undefined) {
				return a.data.priority - b.data.priority;
			}
			if (a.data.priority !== undefined) return -1;
			if (b.data.priority !== undefined) return 1;

			// Fall back to alphabetical sorting
			return a.data.title.localeCompare(b.data.title);
		})
		.map((doc: CollectionEntry<'docs'>) => ({
			// Show index page as "Home", otherwise use the page title
			label: doc.slug === 'index' ? 'Home' : doc.data.title,
			// Root path for index, otherwise use the slug
			link: `/${doc.slug === 'index' ? '' : doc.slug}`
		})),

	// Other groups (Foundations, Components) in the order defined in config.ts
	...orderedGroups
		.map((group) => {
			if (!docGroups[group]) return null;
			return {
				label: group.toUpperCase(),
				items: docGroups[group].map((doc: CollectionEntry<'docs'>) => ({
					label: doc.data.title,
					link: `/${doc.slug}`
				}))
			};
		})
		.filter(Boolean),

	// Any additional groups not defined in config.ts
	...Object.entries(docGroups)
		.filter(([group]) => ![...groups, 'Ungrouped'].includes(group))
		.map(([group, items]) => ({
			label: group.toUpperCase(),
			items: items.map((doc: CollectionEntry<'docs'>) => ({
				label: doc.data.title,
				link: `/${doc.slug}`
			}))
		}))
];
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		
		<!-- Favicon -->
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		
		<!-- Apple Touch Icons -->
		<link rel="apple-touch-icon" sizes="120x120" href="/apple-touch-icon-120x120.png" />
		<link rel="apple-touch-icon" sizes="152x152" href="/apple-touch-icon-152x152.png" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		
		<!-- Android Chrome Icons -->
		<link rel="icon" type="image/png" sizes="192x192" href="/android-chrome-192x192.png" />
		<link rel="icon" type="image/png" sizes="512x512" href="/android-chrome-512x512.png" />
		
		<!-- Web App Manifest -->
		<link rel="manifest" href="/site.webmanifest" />
		
		<!-- Microsoft Tiles -->
		<meta name="msapplication-TileColor" content="#6474ce" />
		<meta name="msapplication-TileImage" content="/msapplication-icon-144x144.png" />
		<meta name="msapplication-config" content="/browserconfig.xml" />
		
		<meta name="generator" content={Astro.generator} />

		<title>{title}</title>
		<meta name="description" content={description} />

		<meta property="og:title" content={title} />
		<meta name="twitter:title" content={title} />
		<!-- Description -->
		<meta name="description" content={description} />
		<meta property="og:description" content={description} />
		<meta name="twitter:description" content={description} />

		<!-- Image -->
		<meta property="og:image" content={openGraphImage} />
		<meta property="og:image:width" content="1200" />
		<meta property="og:image:height" content="630" />
		<meta name="twitter:image" content={openGraphImage} />

		<!-- Prevent flash of wrong theme -->
		<script is:inline>
			const theme = (() => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return 'light';
			})();
			document.documentElement.classList[theme === 'dark' ? 'add' : 'remove']('dark');
		</script>
	</head>
	<body class="min-h-screen bg-[#FAFAFB] dark:bg-[#121212] w-full">
		<Header client:load />
		<SidebarOverlay client:load />

		<div class="flex flex-col lg:flex-row mt-14">
			<!-- Left Sidebar -->
			<aside
				class="fixed lg:sticky top-14 left-0 z-40 w-64 h-[calc(100vh-3.5rem)] border-r border-[#EDEDF0] bg-white dark:bg-[#121212] dark:border-neutral-800 lg:translate-x-0 transform -translate-x-full transition-transform duration-200 ease-in-out"
				id="left-sidebar"
			>
				<Sidebar navigation={navigation} client:load />
			</aside>

			<!-- Main content -->
			<div class="flex-1 w-full">
				<main class="max-w-4xl mx-auto px-4 lg:px-8 py-6 lg:py-12">
					<slot />
				</main>
			</div>

			<!-- Right Sidebar -->
			<aside
				class="fixed lg:sticky top-14 right-0 z-40 w-64 h-[calc(100vh-3.5rem)] border-l border-[#EDEDF0] bg-[#FAFAFB] dark:bg-[#121212] dark:border-neutral-800 lg:translate-x-0 transform translate-x-full transition-transform duration-200 ease-in-out"
				id="right-sidebar"
			>
				<TableOfContents client:load />
			</aside>
		</div>

		<Footer client:load />
	</body>
</html>
